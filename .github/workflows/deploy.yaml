name: Deploy to Cloud Server

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/zagir2000/linguaai:latest
          ghcr.io/zagir2000/linguaai:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.run_number }}
          GIT_COMMIT=${{ github.sha }}
        
    - name: Run tests
      run: |
        go test ./...
        
    - name: Deploy to cloud server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          # Создаем директорию для приложения
          sudo mkdir -p /opt/lingua-ai
          sudo chown $USER:$USER /opt/lingua-ai
          cd /opt/lingua-ai
          
          # Останавливаем текущие контейнеры
          docker-compose down || true
          
          # Принудительно обновляем образ
          docker pull ghcr.io/zagir2000/linguaai:latest || true
          
          # Очищаем неиспользуемые образы и кэш
          docker system prune -f || true
          
          # Очищаем директорию
          rm -rf *
          
          # Создаем .env файл с переменными окружения
          cat > .env << 'EOF'
          # Telegram Bot Configuration
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_WEBHOOK_URL=${{ secrets.TELEGRAM_WEBHOOK_URL }}
          
          # AI Provider Configuration
          AI_PROVIDER=${{ secrets.AI_PROVIDER || 'deepseek' }}
          AI_MODEL=${{ secrets.AI_MODEL || 'deepseek-chat' }}
          AI_MAX_TOKENS=${{ secrets.AI_MAX_TOKENS || '1000' }}
          AI_TEMPERATURE=${{ secrets.AI_TEMPERATURE || '0.7' }}
          
          # DeepSeek Configuration
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          DEEPSEEK_BASE_URL=${{ secrets.DEEPSEEK_BASE_URL || 'https://api.deepseek.com/v1' }}
          
          # OpenRouter Configuration
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          OPENROUTER_SITE_URL=${{ secrets.OPENROUTER_SITE_URL || 'https://lingua-ai.ru' }}
          OPENROUTER_SITE_NAME=${{ secrets.OPENROUTER_SITE_NAME || 'Lingua AI' }}
          
          # Whisper Configuration
          WHISPER_API_URL=http://whisper:9000
          WHISPER_MODEL=${{ secrets.WHISPER_MODEL || 'small' }}
          WHISPER_COMPUTE=${{ secrets.WHISPER_COMPUTE || 'int8' }}
          
          # Database Configuration
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=lingua_user
          DB_PASSWORD=lingua_password
          DB_NAME=lingua_ai
          DB_SSL_MODE=disable
          
          # Application Configuration
          APP_ENV=production
          LOG_LEVEL=${{ secrets.LOG_LEVEL || 'info' }}
          APP_PORT=8080
          
          # YooKassa Configuration
          YUKASSA_SHOP_ID=${{ secrets.YUKASSA_SHOP_ID }}
          YUKASSA_SECRET_KEY=${{ secrets.YUKASSA_SECRET_KEY }}
          YUKASSA_TEST_MODE=${{ secrets.YUKASSA_TEST_MODE || 'false' }}
          
          # TTS Configuration
          TTS_ENABLED=${{ secrets.TTS_ENABLED || 'false' }}
          EOF
          
          # Создаем docker-compose.yml с готовым образом
          cat > docker-compose.yml << 'EOF'
          services:
            postgres:
              image: postgres:15-alpine
              container_name: lingua-ai-postgres
              environment:
                POSTGRES_DB: lingua_ai
                POSTGRES_USER: lingua_user
                POSTGRES_PASSWORD: lingua_password
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - ./scripts/migrations:/docker-entrypoint-initdb.d
              ports:
                - "5433:5432"
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U lingua_user -d lingua_ai"]
                interval: 30s
                timeout: 10s
                retries: 3
              
            whisper:
              image: onerahmet/openai-whisper-asr-webservice:latest
              container_name: whisper
              ports:
                - "8081:9000"
              environment:
                ASR_MODEL: small
                ASR_TASK: transcribe
                ASR_DEVICE: cpu
                ASR_COMPUTE_TYPE: int8
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/docs"]
                interval: 30s
                timeout: 10s
                retries: 3
              
            app:
              image: ghcr.io/zagir2000/linguaai:latest
              container_name: lingua-ai-app
              environment:
                - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
                - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
                - AI_PROVIDER=${AI_PROVIDER}
                - AI_MODEL=${AI_MODEL}
                - AI_MAX_TOKENS=${AI_MAX_TOKENS}
                - AI_TEMPERATURE=${AI_TEMPERATURE}
                - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
                - DEEPSEEK_BASE_URL=${DEEPSEEK_BASE_URL}
                - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
                - OPENROUTER_SITE_URL=${OPENROUTER_SITE_URL}
                - OPENROUTER_SITE_NAME=${OPENROUTER_SITE_NAME}
                - WHISPER_API_URL=${WHISPER_API_URL}
                - WHISPER_MODEL=${WHISPER_MODEL}
                - WHISPER_COMPUTE=${WHISPER_COMPUTE}
                - DB_HOST=${DB_HOST}
                - DB_PORT=${DB_PORT}
                - DB_USER=${DB_USER}
                - DB_PASSWORD=${DB_PASSWORD}
                - DB_NAME=${DB_NAME}
                - DB_SSL_MODE=${DB_SSL_MODE}
                - APP_ENV=${APP_ENV}
                - LOG_LEVEL=${LOG_LEVEL}
                - APP_PORT=${APP_PORT}
                - YUKASSA_SHOP_ID=${YUKASSA_SHOP_ID}
                - YUKASSA_SECRET_KEY=${YUKASSA_SECRET_KEY}
                - YUKASSA_TEST_MODE=${YUKASSA_TEST_MODE}
                - TTS_ENABLED=${TTS_ENABLED}
                      volumes:
          - /opt/lingua-ai-tts/tts_env:/opt/lingua-ai-tts/tts_env:ro
          - /root/.local/share/tts:/root/.local/share/tts:ro
              ports:
                - "8080:8080"
              depends_on:
                postgres:
                  condition: service_healthy
                whisper:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
                interval: 30s
                timeout: 10s
                retries: 3
              
          volumes:
            postgres_data:
              driver: local
          EOF
          
          # Создаем директорию для скриптов
          mkdir -p scripts/migrations
          
          # Клонируем репозиторий для миграций
          git clone --depth 1 https://github.com/${{ github.repository }}.git temp
          cp -r temp/scripts/* scripts/ 2>/dev/null || true
          rm -rf temp
          
          # Проверяем, что Docker Compose установлен
          docker-compose --version
          
          # Запускаем все контейнеры с принудительным пересозданием
          docker-compose up -d --force-recreate
          
          # Ждем запуска всех сервисов
          echo "Ожидание запуска PostgreSQL..."
          sleep 10
          
          # Проверяем готовность PostgreSQL
          echo "Проверка готовности PostgreSQL..."
          docker-compose exec -T postgres pg_isready -U lingua_user -d lingua_ai || echo "PostgreSQL еще не готов"
          
          # Проверяем статус контейнеров
          docker-compose ps
          
          # Ждем готовности приложения
          echo "Ожидание готовности приложения..."
          sleep 20
          
          # Проверяем health check с retry
          echo "Проверка health check приложения..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/health; then
              echo "✅ Приложение готово!"
              break
            else
              echo "⏳ Попытка $i/5 - приложение еще не готово, ждем..."
              sleep 10
            fi
          done
          
          # Финальная проверка
          curl -f http://localhost:8080/health || exit 1
          
          echo "✅ Deployment completed successfully!"