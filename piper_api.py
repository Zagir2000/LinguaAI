#!/usr/bin/env python3
"""
Piper TTS API —Å–µ—Ä–≤–µ—Ä
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP API –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Piper TTS
"""

import os
import subprocess
import tempfile
import json
from pathlib import Path
from typing import Optional

from fastapi import FastAPI, HTTPException, Form
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

app = FastAPI(title="Piper TTS API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—É—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –º–æ–¥–µ–ª—è–º
VOICES_DIR = Path("/app/voices")
RUSSIAN_VOICE = {
    "model": VOICES_DIR / "ru_RU-dmitri-medium.onnx",
    "config": VOICES_DIR / "ru_RU-dmitri-medium.onnx.json"
}
ENGLISH_VOICE = {
    "model": VOICES_DIR / "en_US-lessac-medium.onnx", 
    "config": VOICES_DIR / "en_US-lessac-medium.onnx.json"
}

def detect_language(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
    russian_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è')
    english_chars = sum(1 for char in text if 'a' <= char.lower() <= 'z')
    
    if russian_chars > english_chars:
        return "ru"
    return "en"

def synthesize_speech(text: str, language: Optional[str] = None) -> bytes:
    """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text.strip():
        raise ValueError("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not language:
        language = detect_language(text)
    
    # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å
    if language == "ru":
        voice = RUSSIAN_VOICE
    else:
        voice = ENGLISH_VOICE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
    if not voice["model"].exists() or not voice["config"].exists():
        raise FileNotFoundError(f"–ì–æ–ª–æ—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ {language} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
        temp_path = temp_file.name
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
        cmd = [
            "/usr/local/bin/piper",
            "--model", str(voice["model"]),
            "--config", str(voice["config"]),
            "--input_text", text,
            "--output_file", temp_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {result.stderr}")
        
        # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        with open(temp_path, "rb") as f:
            audio_data = f.read()
        
        return audio_data
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.unlink(temp_path)

@app.get("/health")
@app.head("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "piper-tts"}

@app.get("/voices")
async def list_voices():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
    voices = []
    
    if RUSSIAN_VOICE["model"].exists():
        voices.append({
            "language": "ru",
            "name": "Dmitri (Russian)",
            "model": str(RUSSIAN_VOICE["model"]),
            "config": str(RUSSIAN_VOICE["config"])
        })
    
    if ENGLISH_VOICE["model"].exists():
        voices.append({
            "language": "en", 
            "name": "Lessac (English)",
            "model": str(ENGLISH_VOICE["model"]),
            "config": str(ENGLISH_VOICE["config"])
        })
    
    return {"voices": voices}

@app.post("/synthesize")
async def synthesize(
    text: str = Form(..., description="–¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"),
    language: Optional[str] = Form(None, description="–Ø–∑—ã–∫ (ru/en), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
):
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        if len(text) > 1000:
            raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        audio_data = synthesize_speech(text, language)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            temp_file.write(audio_data)
            temp_path = temp_file.name
        
        return FileResponse(
            temp_path,
            media_type="audio/wav",
            filename="speech.wav",
            headers={"Content-Disposition": "attachment; filename=speech.wav"}
        )
    
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except FileNotFoundError as e:
        raise HTTPException(status_code=500, detail=f"–ì–æ–ª–æ—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {str(e)}")
    except RuntimeError as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

@app.post("/synthesize-raw")
async def synthesize_raw(
    text: str = Form(..., description="–¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"),
    language: Optional[str] = Form(None, description="–Ø–∑—ã–∫ (ru/en), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
):
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç raw –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ)"""
    try:
        if len(text) > 1000:
            raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        audio_data = synthesize_speech(text, language)
        
        from fastapi.responses import Response
        return Response(
            content=audio_data,
            media_type="audio/wav",
            headers={"Content-Disposition": "attachment; filename=speech.wav"}
        )
    
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except FileNotFoundError as e:
        raise HTTPException(status_code=500, detail=f"–ì–æ–ª–æ—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {str(e)}")
    except RuntimeError as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("üéµ –ó–∞–ø—É—Å–∫–∞–µ–º Piper TTS API —Å–µ—Ä–≤–µ—Ä...")
    print(f"üìÅ –ì–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏: {VOICES_DIR}")
    print(f"üá∑üá∫ –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å: {RUSSIAN_VOICE['model'].exists()}")
    print(f"üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å: {ENGLISH_VOICE['model'].exists()}")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )
