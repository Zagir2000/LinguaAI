package scheduler

import (
	"context"
	"fmt"
	"html"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"

	"lingua-ai/internal/ai"
	"lingua-ai/internal/message"
	"lingua-ai/internal/user"
	"lingua-ai/pkg/models"
)

// InactiveUsersJob –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
type InactiveUsersJob struct {
	userService    *user.Service
	messageService *message.Service
	aiClient       ai.AIClient
	bot            *tgbotapi.BotAPI
	logger         *zap.Logger
}

// NewInactiveUsersJob —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –¥–∂–æ–±—É –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func NewInactiveUsersJob(
	userService *user.Service,
	messageService *message.Service,
	aiClient ai.AIClient,
	bot *tgbotapi.BotAPI,
	logger *zap.Logger,
) *InactiveUsersJob {
	return &InactiveUsersJob{
		userService:    userService,
		messageService: messageService,
		aiClient:       aiClient,
		bot:            bot,
		logger:         logger,
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∂–æ–±—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (j *InactiveUsersJob) Run(ctx context.Context) error {
	j.logger.Info("–∑–∞–ø—É—Å–∫ –¥–∂–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
	inactiveUsers, err := j.userService.GetInactiveUsers(ctx, 24*time.Hour)
	if err != nil {
		j.logger.Error("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", zap.Error(err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %w", err)
	}

	j.logger.Info("–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", zap.Int("count", len(inactiveUsers)))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	for _, user := range inactiveUsers {
		if err := j.sendTaskToUser(ctx, user); err != nil {
			j.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
				zap.Error(err),
				zap.Int64("user_id", user.ID),
				zap.String("username", user.Username))
			continue
		}
	}

	j.logger.Info("–¥–∂–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// sendTaskToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (j *InactiveUsersJob) sendTaskToUser(ctx context.Context, user *models.User) error {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	task, err := j.generateTask(ctx, user)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	messageText := fmt.Sprintf(`üéØ <b>–ü—Ä–∏–≤–µ—Ç, %s!</b>

–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –í–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:

%s

üí° <i>–ü–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!</i>

üî• –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP!`, user.FirstName, task)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
	systemMessage := &models.CreateMessageRequest{
		UserID:  user.ID,
		Role:    "system",
		Content: fmt.Sprintf("–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –∑–∞–¥–∞–Ω–∏–µ: %s", task),
	}

	if _, err := j.messageService.CreateMessage(ctx, systemMessage); err != nil {
		j.logger.Error("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
			zap.Error(err),
			zap.Int64("user_id", user.ID))
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π HTML
	msg := tgbotapi.NewMessage(user.TelegramID, messageText)
	msg.ParseMode = "HTML"

	_, err = j.bot.Send(msg)
	if err != nil {
		// –ï—Å–ª–∏ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
		j.logger.Warn("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
			zap.Error(err),
			zap.Int64("user_id", user.ID))

		// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
		safeText := html.EscapeString(fmt.Sprintf(`üéØ –ü—Ä–∏–≤–µ—Ç, %s!

–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –í–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:

%s

üí° –ü–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!

üî• –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP!`, user.FirstName, task))

		fallbackMsg := tgbotapi.NewMessage(user.TelegramID, safeText)
		_, fallbackErr := j.bot.Send(fallbackMsg)
		if fallbackErr != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è: %w", fallbackErr)
		}
	}

	j.logger.Info("–∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
		zap.Int64("user_id", user.ID),
		zap.String("username", user.Username),
		zap.String("level", user.Level))

	return nil
}

// generateTask –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (j *InactiveUsersJob) generateTask(ctx context.Context, user *models.User) (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	history, err := j.messageService.GetChatHistory(ctx, user.ID, 10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
	if err != nil {
		j.logger.Error("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
			zap.Error(err),
			zap.Int64("user_id", user.ID))
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
	var difficulty string
	switch user.Level {
	case models.LevelBeginner:
		difficulty = "beginner (A1-A2)"
	case models.LevelIntermediate:
		difficulty = "intermediate (B1-B2)"
	case models.LevelAdvanced:
		difficulty = "advanced (C1-C2)"
	default:
		difficulty = "beginner (A1-A2)"
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
	var previousTasks []string
	for _, msg := range history.Messages {
		if msg.Role == "system" && strings.Contains(msg.Content, "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –∑–∞–¥–∞–Ω–∏–µ:") {
			taskPart := strings.TrimPrefix(msg.Content, "–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –∑–∞–¥–∞–Ω–∏–µ: ")
			previousTasks = append(previousTasks, taskPart)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
	var contextInfo string
	if len(previousTasks) > 0 {
		contextInfo = fmt.Sprintf(`
–í–ê–ñ–ù–û: –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —ç—Ç–∏ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:
%s

–ü—Ä–∏–¥—É–º–∞–π –ù–û–í–û–ï, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–µ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.`, strings.Join(previousTasks, "\n- "))
	}

	// –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è
	prompt := fmt.Sprintf(`–¢—ã ‚Äî AI-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è Telegram-–±–æ—Ç–∞.

–ó–∞–¥–∞—á–∞: –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Ä–æ–≤–Ω—è %s.%s

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
- üö´ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown (** –∏–ª–∏ #)
- ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram
- –û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ó–ê–î–ê–ù–ò–Æ:
1. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
2. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è %s
3. –°—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
4. –ß–µ—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
5. –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å
6. –î–ª–∏–Ω–∞: –º–∞–∫—Å–∏–º—É–º 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ù–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
<b>Task:</b> [—Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ]`, difficulty, contextInfo, difficulty)

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
	options := ai.GenerationOptions{
		Temperature: 0.7,
		MaxTokens:   300,
	}

	response, err := j.aiClient.GenerateResponse(ctx, []ai.Message{
		{
			Role:    "user",
			Content: prompt,
		},
	}, options)

	if err != nil {
		j.logger.Error("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è –æ—Ç AI", zap.Error(err))
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		return j.getDefaultTask(user.Level), nil
	}

	return response.Content, nil
}

// getDefaultTask –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ AI
func (j *InactiveUsersJob) getDefaultTask(level string) string {
	defaultTasks := map[string][]string{
		models.LevelBeginner: {
			"Tell me about your favorite food in 2-3 sentences. What do you like about it?",
			"Describe your morning routine. What do you usually do when you wake up?",
			"What's your favorite color and why? Share your thoughts!",
		},
		models.LevelIntermediate: {
			"If you could visit any country in the world, where would you go and what would you do there?",
			"Describe a memorable moment from your childhood. What made it special?",
			"What's a skill you'd like to learn and why? How would it change your life?",
		},
		models.LevelAdvanced: {
			"What's your opinion on the impact of technology on human relationships? Share your perspective.",
			"Describe a book, movie, or article that changed your way of thinking. What insights did you gain?",
			"If you could solve one global problem, what would it be and how would you approach it?",
		},
	}

	tasks, exists := defaultTasks[level]
	if !exists {
		tasks = defaultTasks[models.LevelBeginner]
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
	return tasks[time.Now().Unix()%int64(len(tasks))]
}
