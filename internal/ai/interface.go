package ai

import (
	"context"
	"html"
	"regexp"
	"strings"
)

// Message –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI
type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// Response –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI
type Response struct {
	Content      string `json:"content"`
	Model        string `json:"model"`
	Usage        Usage  `json:"usage"`
	FinishReason string `json:"finish_reason"`
	Provider     string `json:"provider"`
}

// Usage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
type Usage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

// GenerationOptions –æ–ø—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
type GenerationOptions struct {
	Temperature float64 `json:"temperature,omitempty"`
	MaxTokens   int     `json:"max_tokens,omitempty"`
}

// AIClient –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
type AIClient interface {
	// GenerateResponse –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
	GenerateResponse(ctx context.Context, messages []Message, options GenerationOptions) (*Response, error)

	// GetName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
	GetName() string
}

// AIConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è AI –∫–ª–∏–µ–Ω—Ç–æ–≤
type AIConfig struct {
	Provider    string
	Model       string
	MaxTokens   int
	Temperature float64
	DeepSeek    DeepSeekConfig
	OpenRouter  OpenRouterConfig
}

// DeepSeekConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DeepSeek
type DeepSeekConfig struct {
	APIKey  string
	BaseURL string
}

// OpenRouterConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
type OpenRouterConfig struct {
	APIKey   string
	SiteURL  string
	SiteName string
}

// SystemPrompt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
func GetSystemPrompt() string {
	return `–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ "Lingua AI".

–°–¢–†–û–ì–û: –ø—Ä–æ–≤–µ—Ä—è–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ.
–ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç.
–ù–ï –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º.

–ó–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.
	–§–æ—Ä–º–∞—Ç: HTML <b>–∂–∏—Ä–Ω—ã–π</b> <i>–∫—É—Ä—Å–∏–≤</i>. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º.`
}

// fixHTMLTags –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é HTML —Ä–∞–∑–º–µ—Ç–∫—É –∏ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç XSS
func fixHTMLTags(text string) string {
	// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTML —Ç–µ–≥–∏ –¥–ª—è Telegram
	allowedTags := []string{"b", "i", "u", "code", "pre", "a", "strong", "em"}

	// –°–æ–∑–¥–∞–µ–º regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö HTML —Ç–µ–≥–æ–≤
	htmlTagRegex := regexp.MustCompile(`</?([a-zA-Z][a-zA-Z0-9]*)\b[^>]*>`)

	// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
	result := htmlTagRegex.ReplaceAllStringFunc(text, func(tag string) string {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
		tagNameRegex := regexp.MustCompile(`</?([a-zA-Z][a-zA-Z0-9]*)\b`)
		matches := tagNameRegex.FindStringSubmatch(tag)
		if len(matches) < 2 {
			return "" // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏
		}

		tagName := strings.ToLower(matches[1])

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ç–µ–≥
		allowed := false
		for _, allowedTag := range allowedTags {
			if tagName == allowedTag {
				allowed = true
				break
			}
		}

		if !allowed {
			return "" // –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏ –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–∫—Ä–æ–º–µ <a>)
		if strings.HasPrefix(tag, "</") {
			return "</" + tagName + ">"
		} else if tagName == "a" {
			// –î–ª—è —Å—Å—ã–ª–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º href –∞—Ç—Ä–∏–±—É—Ç, –Ω–æ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
			hrefRegex := regexp.MustCompile(`href\s*=\s*["']([^"']*)["']`)
			hrefMatches := hrefRegex.FindStringSubmatch(tag)
			if len(hrefMatches) > 1 {
				// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL (—Ç–æ–ª—å–∫–æ http/https)
				href := hrefMatches[1]
				if strings.HasPrefix(href, "http://") || strings.HasPrefix(href, "https://") {
					return `<a href="` + html.EscapeString(href) + `">`
				}
			}
			return "" // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ href
		} else {
			return "<" + tagName + ">"
		}
	})

	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTML —Ç–µ–≥–∏
	// –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã
	tagMarkers := map[string]string{
		"<b>": "{{BOLD_START}}", "</b>": "{{BOLD_END}}",
		"<i>": "{{ITALIC_START}}", "</i>": "{{ITALIC_END}}",
		"<u>": "{{UNDERLINE_START}}", "</u>": "{{UNDERLINE_END}}",
		"<code>": "{{CODE_START}}", "</code>": "{{CODE_END}}",
		"<strong>": "{{STRONG_START}}", "</strong>": "{{STRONG_END}}",
		"<em>": "{{EM_START}}", "</em>": "{{EM_END}}",
	}

	for tag, marker := range tagMarkers {
		result = strings.ReplaceAll(result, tag, marker)
	}

	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã
	result = html.EscapeString(result)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
	for tag, marker := range tagMarkers {
		result = strings.ReplaceAll(result, marker, tag)
	}

	return result
}

// SanitizeResponse —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–º
func SanitizeResponse(text string) string {
	blockedPhrases := []string{
		"gpt-4", "gpt-3", "gpt", "chatgpt", "openai", "gigachat", "yandex", "—Å–±–µ—Ä",
		"–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–æ–¥–µ–ª—å", "—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai model",
		"large language model", "llm", "claude", "bard", "gemini", "anthropic",
		"—è –æ–±—É—á–µ–Ω", "–º–µ–Ω—è –æ–±—É—á–∏–ª–∏", "–º–æ—è –º–æ–¥–µ–ª—å", "—è –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞", "—è —Å–æ–∑–¥–∞–Ω",
		"—è —Ä–∞–±–æ—Ç–∞—é –Ω–∞", "–º–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–º–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "i was trained",
		"trained on", "i'm trained", "i am trained", "was trained",
	}

	// –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è —ç—Ç–∏—Ö —Ç–µ–º)
	irrelevantTopics := []string{
		"–±–æ–µ–≤–∏–∫–∏", "—Ñ–∏–ª—å–º—ã", "–∫–∏–Ω–æ", "–∞–∫—Ç–µ—Ä—ã", "—Ä–µ–∂–∏—Å—Å–µ—Ä—ã", "—Å–µ—Ä–∏–∞–ª—ã", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã",
		"–ø–æ–ª–∏—Ç–∏–∫–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "—Å–ø–æ—Ä—Ç", "–µ–¥–∞", "–∫—É–ª–∏–Ω–∞—Ä–∏—è", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
		"–º—É–∑—ã–∫–∞", "–ø–µ–≤—Ü—ã", "–∫–æ–Ω—Ü–µ—Ä—Ç—ã", "–∏–≥—Ä—ã", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
		"–∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "–º–æ–¥–∞", "–∫—Ä–∞—Å–æ—Ç–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
	}

	lower := strings.ToLower(text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
	for _, phrase := range blockedPhrases {
		if strings.Contains(lower, phrase) {
			return "ü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º! –î–∞–≤–∞–π —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Ç–µ–º—ã
	words := strings.Fields(lower)
	if len(words) > 5 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
		firstWords := strings.Join(words[:5], " ")
		for _, topic := range irrelevantTopics {
			if strings.Contains(firstWords, topic) {
				return `–Ø –ø–æ–º–æ–≥–∞—é –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫! üá¨üáß 
				
–ï—Å–ª–∏ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —ç—Ç–∞ —Ç–µ–º–∞, –¥–∞–≤–∞–π –∏–∑—É—á–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã! 

–ù–∞–ø–∏—à–∏ –º–Ω–µ, –∫–∞–∫–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å. üìö`
			}
		}
	}

	// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ –∑–∞—â–∏—â–∞–µ–º –æ—Ç XSS –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
	return fixHTMLTags(text)
}
