package bot

import (
	"context"
	"fmt"
	"strings"
	"time"

	"lingua-ai/internal/flashcards"
	"lingua-ai/pkg/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// FlashcardHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
type FlashcardHandler struct {
	bot              *tgbotapi.BotAPI
	flashcardService *flashcards.Service
	logger           *zap.Logger
}

// NewFlashcardHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
func NewFlashcardHandler(bot *tgbotapi.BotAPI, flashcardService *flashcards.Service, logger *zap.Logger) *FlashcardHandler {
	return &FlashcardHandler{
		bot:              bot,
		flashcardService: flashcardService,
		logger:           logger,
	}
}

// HandleFlashcardsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /flashcards
func (h *FlashcardHandler) HandleFlashcardsCommand(ctx context.Context, chatID int64, userID int64, userLevel string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
	session := h.flashcardService.GetCurrentSession(userID)
	if session != nil {
		return h.showCurrentCard(ctx, chatID, userID)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑—É—á–µ–Ω–∏—è
	recommendation, err := h.flashcardService.GetRecommendedStudyTime(ctx, userID)
	if err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", zap.Error(err))
		recommendation = "–ì–æ—Ç–æ–≤—ã –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞?"
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫
	messageText := fmt.Sprintf(`üìö <b>–°–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</b>

%s

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, recommendation)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", "flashcard_start"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "flashcard_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–∞–∑–∞–¥", "flashcard_back"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err = h.bot.Send(msg)
	return err
}

// HandleFlashcardCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func (h *FlashcardHandler) HandleFlashcardCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, userID int64, userLevel string) error {
	data := callback.Data
	chatID := callback.Message.Chat.ID

	h.logger.Debug("–æ–±—Ä–∞–±–æ—Ç–∫–∞ flashcard callback",
		zap.String("data", data),
		zap.Int64("user_id", userID))

	switch {
	case data == "flashcard_start":
		return h.startFlashcardSession(ctx, chatID, userID, userLevel)
	case data == "flashcard_stats":
		return h.showFlashcardStats(ctx, chatID, userID)
	case data == "flashcard_back":
		return h.showMainMenu(ctx, chatID)
	case data == "flashcard_show_translation":
		return h.handleShowTranslation(ctx, callback, userID)
	case strings.HasPrefix(data, "flashcard_answer_"):
		return h.handleCardAnswer(ctx, callback, userID)
	case data == "flashcard_next":
		return h.showCurrentCard(ctx, chatID, userID)
	case data == "flashcard_end":
		return h.endFlashcardSession(ctx, chatID, userID)
	case data == "flashcard_results":
		session := h.flashcardService.GetCurrentSession(userID)
		if session != nil {
			return h.showSessionResults(ctx, chatID, userID, session)
		}
		return h.HandleFlashcardsCommand(ctx, chatID, userID, userLevel)
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: %s", data)
	}
}

// startFlashcardSession –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–∑—É—á–µ–Ω–∏—è
func (h *FlashcardHandler) startFlashcardSession(ctx context.Context, chatID int64, userID int64, userLevel string) error {
	session, err := h.flashcardService.StartFlashcardSession(ctx, userID, userLevel)
	if err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫", zap.Error(err))
		return h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	if session == nil {
		recommendedTime, timeErr := h.flashcardService.GetRecommendedStudyTime(ctx, userID)
		if timeErr == nil && recommendedTime != "" {
			return h.sendMessage(chatID, fmt.Sprintf("üéâ <b>–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã!</b>\n\n%s\n\n‚è∞ –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.", recommendedTime))
		}

		return h.sendMessage(chatID, "üéâ <b>–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã!</b>\n\n‚è∞ –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")
	}

	if session.CurrentCard == nil {
		return h.sendMessage(chatID, "üéâ –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
	return h.showCurrentCard(ctx, chatID, userID)
}

// showCurrentCard –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
func (h *FlashcardHandler) showCurrentCard(ctx context.Context, chatID int64, userID int64) error {
	session := h.flashcardService.GetCurrentSession(userID)
	if session == nil {
		h.logger.Warn("–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏", zap.Int64("user_id", userID))
		return h.sendMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üìù –°–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\".")
	}

	if session.CurrentCard == nil {
		return h.showSessionResults(ctx, chatID, userID, session)
	}

	card := session.CurrentCard.Flashcard
	progress := h.flashcardService.GetSessionProgress(userID)

	messageText := fmt.Sprintf(`üìö <b>–ö–∞—Ä—Ç–æ—á–∫–∞ %d/%d</b>

üá¨üáß <b>%s</b>

<i>%s</i>

üí° –ó–Ω–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞?`,
		progress["completed"].(int)+1,
		progress["total_cards"].(int),
		card.Word,
		card.Example,
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", "flashcard_show_translation"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", "flashcard_end"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := h.bot.Send(msg)
	return err
}

// handleShowTranslation –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
func (h *FlashcardHandler) handleShowTranslation(ctx context.Context, callback *tgbotapi.CallbackQuery, userID int64) error {
	chatID := callback.Message.Chat.ID
	session := h.flashcardService.GetCurrentSession(userID)
	if session == nil || session.CurrentCard == nil {
		h.logger.Warn("—Å–µ—Å—Å–∏—è –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–µ–≤–æ–¥–∞",
			zap.Int64("user_id", userID),
			zap.Bool("session_exists", session != nil))
		return h.sendMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üìù –°–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\".")
	}

	card := session.CurrentCard.Flashcard
	progress := h.flashcardService.GetSessionProgress(userID)

	messageText := fmt.Sprintf(`üìö <b>–ö–∞—Ä—Ç–æ—á–∫–∞ %d/%d</b>

üá¨üáß <b>%s</b>
üá∑üá∫ <b>%s</b>

<i>%s</i>

‚ùì –ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ?`,
		progress["completed"].(int)+1,
		progress["total_cards"].(int),
		card.Word,
		card.Translation,
		card.Example,
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üòä –õ–µ–≥–∫–æ", "flashcard_answer_easy"),
			tgbotapi.NewInlineKeyboardButtonData("ü§î –•–æ—Ä–æ—à–æ", "flashcard_answer_good"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üòì –°–ª–æ–∂–Ω–æ", "flashcard_answer_hard"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ –∑–Ω–∞–ª", "flashcard_answer_wrong"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := h.bot.Send(msg)
	return err
}

// handleCardAnswer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
func (h *FlashcardHandler) handleCardAnswer(ctx context.Context, callback *tgbotapi.CallbackQuery, userID int64) error {
	data := callback.Data
	chatID := callback.Message.Chat.ID

	var isCorrect bool
	var difficulty int

	switch data {
	case "flashcard_answer_easy":
		isCorrect = true
		difficulty = 1
	case "flashcard_answer_good":
		isCorrect = true
		difficulty = 3
	case "flashcard_answer_hard":
		isCorrect = true
		difficulty = 4
	case "flashcard_answer_wrong":
		isCorrect = false
		difficulty = 5
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: %s", data)
	}

	answer, err := h.flashcardService.AnswerCard(ctx, userID, isCorrect, difficulty)
	if err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞", zap.Error(err))

		// –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë
		if err.Error() == "–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" {
			h.logger.Info("–ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫", zap.Int64("user_id", userID))
			return h.sendMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üìù –°–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\".")
		}

		return h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
	var resultEmoji string
	var nextReviewText string

	if answer.IsCorrect {
		resultEmoji = "‚úÖ"
		hours := int(answer.NextReviewIn.Hours())
		if hours < 1 {
			nextReviewText = "–ü–æ–≤—Ç–æ—Ä–∏–º —Å–∫–æ—Ä–æ"
		} else {
			nextReviewText = fmt.Sprintf("–ü–æ–≤—Ç–æ—Ä–∏–º —á–µ—Ä–µ–∑ %d —á", hours)
		}
	} else {
		resultEmoji = "‚ùå"
		nextReviewText = "–ü–æ–≤—Ç–æ—Ä–∏–º —Å–∫–æ—Ä–æ"
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	session := h.flashcardService.GetCurrentSession(userID)
	hasMoreCards := session != nil && session.CurrentCard != nil

	messageText := fmt.Sprintf(`%s <b>–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!</b>

%s

%s`,
		resultEmoji,
		nextReviewText,
		func() string {
			if hasMoreCards {
				return "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ..."
			}
			return "üéâ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
		}(),
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			func() tgbotapi.InlineKeyboardButton {
				if hasMoreCards {
					return tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", "flashcard_next")
				}
				return tgbotapi.NewInlineKeyboardButtonData("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "flashcard_results")
			}(),
		),
	)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	editMsg := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID, messageText)
	editMsg.ParseMode = "HTML"
	editMsg.ReplyMarkup = &keyboard

	_, err = h.bot.Send(editMsg)
	return err
}

// showSessionResults –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏
func (h *FlashcardHandler) showSessionResults(ctx context.Context, chatID int64, userID int64, session *models.FlashcardSession) error {
	accuracy := float64(session.CorrectAnswers) / float64(session.CardsCompleted) * 100
	if session.CardsCompleted == 0 {
		accuracy = 0
	}

	messageText := fmt.Sprintf(`üéâ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –ò–∑—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: %d
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: %d
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: %.1f%%
‚Ä¢ –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: %d –º–∏–Ω

üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`,
		session.CardsCompleted,
		session.CorrectAnswers,
		accuracy,
		int(time.Since(session.SessionStarted).Minutes()),
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ï—â–µ —Ä–∞–∑", "flashcard_start"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "flashcard_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "flashcard_back"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := h.bot.Send(msg)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
	h.flashcardService.EndSession(userID)

	return err
}

// showFlashcardStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *FlashcardHandler) showFlashcardStats(ctx context.Context, chatID int64, userID int64) error {
	stats, err := h.flashcardService.GetUserStats(ctx, userID)
	if err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫", zap.Error(err))
		return h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	totalCards := stats["total_cards"].(int)
	learnedCards := stats["learned_cards"].(int)
	cardsToReview := stats["cards_to_review"].(int)
	accuracy := stats["accuracy_percentage"].(float64)

	messageText := fmt.Sprintf(`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫</b>

üìö <b>–û–±—â–µ–µ:</b>
‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: %d
‚Ä¢ –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: %d
‚Ä¢ –ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: %d
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: %.1f%%

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
%s

%s`,
		totalCards,
		learnedCards,
		cardsToReview,
		accuracy,
		h.getProgressBar(learnedCards, totalCards),
		func() string {
			if cardsToReview > 0 {
				return fmt.Sprintf("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å %d –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–µ–≥–æ–¥–Ω—è!", cardsToReview)
			}
			return "üéâ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
		}(),
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", "flashcard_start"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "flashcard_back"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err = h.bot.Send(msg)
	return err
}

// endFlashcardSession –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫
func (h *FlashcardHandler) endFlashcardSession(ctx context.Context, chatID int64, userID int64) error {
	session := h.flashcardService.GetCurrentSession(userID)
	if session == nil {
		return h.HandleFlashcardsCommand(ctx, chatID, userID, "beginner") // Fallback
	}

	h.flashcardService.EndSession(userID)

	messageText := `üìö <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "flashcard_start"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "flashcard_back"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := h.bot.Send(msg)
	return err
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *FlashcardHandler) showMainMenu(ctx context.Context, chatID int64) error {
	messageText := `üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lingua AI! 

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –û–±—É—á–µ–Ω–∏–µ", "learning_menu"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "main_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÜ –†–µ–π—Ç–∏–Ω–≥", "main_rating"),
			tgbotapi.NewInlineKeyboardButtonData("üíé –ü—Ä–µ–º–∏—É–º", "main_premium"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "main_help"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := h.bot.Send(msg)
	return err
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *FlashcardHandler) sendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	_, err := h.bot.Send(msg)
	return err
}

// getProgressBar —Å–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
func (h *FlashcardHandler) getProgressBar(current, total int) string {
	if total == 0 {
		return "‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± 0%"
	}

	percentage := float64(current) / float64(total) * 100
	filled := int(percentage / 10)

	bar := ""
	for i := 0; i < 10; i++ {
		if i < filled {
			bar += "‚ñ∞"
		} else {
			bar += "‚ñ±"
		}
	}

	return fmt.Sprintf("%s %.1f%%", bar, percentage)
}



