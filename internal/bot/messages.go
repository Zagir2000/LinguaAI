package bot

import (
	"fmt"
	"lingua-ai/pkg/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Messages —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
type Messages struct{}

// NewMessages —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessages() *Messages {
	return &Messages{}
}

// Welcome –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (m *Messages) Welcome(firstName, levelText string, xp int) string {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
	xpForNext, _ := models.GetXPForNextLevel(xp)
	progress := models.GetLevelProgress(xp)

	var levelEmoji string
	var progressInfo string

	currentLevel := models.GetLevelByXP(xp)
	switch currentLevel {
	case models.LevelBeginner:
		levelEmoji = "üîµ"
		progressInfo = fmt.Sprintf("üéØ –î–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d XP (%.1f%%)", xpForNext, progress)
	case models.LevelIntermediate:
		levelEmoji = "üü°"
		progressInfo = fmt.Sprintf("üéØ –î–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è: %d XP (%.1f%%)", xpForNext, progress)
	case models.LevelAdvanced:
		levelEmoji = "üü¢"
		progressInfo = "üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
	}

	return fmt.Sprintf(`Hi, <b>%s</b>! Let's chat in English üá¨üáß

–Ø —Ç–≤–æ–π <b>AI-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ</b>. –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ ‚Äî —è –±—É–¥—É –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —É–ª—É—á—à–∞—Ç—å —è–∑—ã–∫!

üéØ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ü–∏—à–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Üí –ø–æ–ª—É—á–∞–π XP
‚Ä¢ –Ø –∏—Å–ø—Ä–∞–≤–ª—é –æ—à–∏–±–∫–∏ –∏ –ø–æ–º–æ–≥—É –ø–æ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞
‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –±–æ–ª—å—à–µ –æ—á–∫–æ–≤

üìä <b>–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:</b> %s %s | ‚≠ê XP: %d
%s

üí° <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤:</b>
üîµ –ù–∞—á–∏–Ω–∞—é—â–∏–π | üü° –ê–∫—Ç–∏–≤–∏—Å—Ç | üü¢ –õ–µ–≥–µ–Ω–¥–∞

üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:</b>
+15 XP ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ
+10 XP ‚Äî –ø–æ–ø—ã—Ç–∫–∞
+3 XP ‚Äî —É—á–∞—Å—Ç–∏–µ

Try to write something in English üöÄ`,
		firstName, levelEmoji, levelText, xp, progressInfo)
}

// Help –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
func (m *Messages) Help() string {
	return `üá¨üáß <b>Lingua AI ‚Äî English Chat Assistant</b>

üéØ <b>–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è:</b>  
–û–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ! –Ø –±—É–¥—É –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏ –æ—à–∏–±–∫–∏, –æ–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–º–æ–≥–∞—Ç—å —É–ª—É—á—à–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ–±—â–µ–Ω–∏–∏.  

üí¨ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>  
1Ô∏è‚É£ –ü–∏—à–µ—à—å –º–Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî —è –æ—Ç–≤–µ—á–∞—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è—é –æ—à–∏–±–∫–∏  
2Ô∏è‚É£ –ü–∏—à–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî —è –ø–µ—Ä–µ–≤–æ–∂—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç  
3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å XP –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å  

üí° <b>–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:</b>  
‚Ä¢ +15 XP ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
‚Ä¢ +10 XP ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º  
‚Ä¢ +3 XP ‚Äî —É—á–∞—Å—Ç–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ  

üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>  
‚Ä¢ /learning ‚Äî –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è  
‚Ä¢ /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å  
‚Ä¢ /flashcards ‚Äî —Å–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è  
‚Ä¢ /clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞  
‚Ä¢ /premium ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π  
‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞  

üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>  
–ì–æ–≤–æ—Ä–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –ø–æ–º–æ–≥—É —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º!  

üìö <b>–ö–∞—Ä—Ç–æ—á–∫–∏:</b>  
‚Ä¢ /flashcards ‚Äî –∏–∑—É—á–∞–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º  
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å  

üíé <b>–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞:</b>  
‚Ä¢ üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ: 15/–¥–µ–Ω—å)  
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞  
‚Ä¢ üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è  
‚Ä¢ üìà –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  

üöÄ <i>Just start chatting in English!</i>`
}

// Stats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (m *Messages) Stats(firstName, levelText string, xp, studyStreak int, lastStudyDate string) string {
	xpForNext, _ := models.GetXPForNextLevel(xp)
	progress := models.GetLevelProgress(xp)

	var progressInfo string
	currentLevel := models.GetLevelByXP(xp)

	switch currentLevel {
	case models.LevelBeginner:
		progressInfo = fmt.Sprintf("üéØ –î–æ —Ä–∞–Ω–≥–∞ –∞–∫—Ç–∏–≤–∏—Å—Ç: %d XP (%.1f%%)", xpForNext, progress)
	case models.LevelIntermediate:
		progressInfo = fmt.Sprintf("üéØ –î–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ª–µ–≥–µ–Ω–¥–∞: %d XP (%.1f%%)", xpForNext, progress)
	case models.LevelAdvanced:
		progressInfo = "üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
	}

	return fmt.Sprintf(`üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> %s  
üìà <b>–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:</b> %s  
‚≠ê <b>–û–ø—ã—Ç:</b> %d XP  
%s  
üî• <b>–°–µ—Ä–∏—è –¥–Ω–µ–π:</b> %d –ø–æ–¥—Ä—è–¥  
üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑—É—á–µ–Ω–∏–µ:</b> %s  

üí° <b>–†–∞–Ω–≥:</b>  
üîµ –ù–æ–≤–∏—á–æ–∫ : 0 ‚Äî 9,999 XP  
üü° –ê–∫—Ç–∏–≤–∏—Å—Ç : 10,000 ‚Äî 19,999 XP  
üü¢ –õ–µ–≥–µ–Ω–¥–∞: 20,000+ XP`, firstName, levelText, xp, progressInfo, studyStreak, lastStudyDate)
}

// ChatCleared –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏
func (m *Messages) ChatCleared() string {
	return "‚úÖ <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!</b>"
}

// UnknownCommand –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
func (m *Messages) UnknownCommand() string {
	return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π <b>/help</b> –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
}

// Error –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (m *Messages) Error(message string) string {
	return fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞:</b> %s\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", message)
}

// GetMainKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (m *Messages) GetMainKeyboard() [][]string {
	return [][]string{
		{"üìö –û–±—É—á–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
		{"üèÜ –†–µ–π—Ç–∏–Ω–≥", "üíé –ü—Ä–µ–º–∏—É–º"},
		{"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "‚ùì –ü–æ–º–æ—â—å"},
		{"üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"},
	}
}

func (m *Messages) GetLearningKeyboard() [][]string {
	return [][]string{
		{"üìù –°–ª–æ–≤–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", "üéì –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è"},
		{"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
	}
}

func (m *Messages) LevelTestIntro() string {
	return `üéØ <b>–¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ</b>

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π <b>—Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>.  

üìã <b>–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:</b>  
‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏  
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏, –ª–µ–∫—Å–∏–∫–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è  
‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å  
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç:  
   üîµ Beginner | üü° Intermediate | üü¢ Advanced  

‚è± <b>–í—Ä–µ–º—è:</b> –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–ø–æ–∫–æ–π–Ω–æ  

üí° <i>–°–æ–≤–µ—Ç:</i> –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç  

üöÄ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?  
–ù–∞–∂–º–∏ <b>¬´–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç¬ª</b>, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å!`
}

// LevelTestQuestion –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
func (m *Messages) LevelTestQuestion(questionNum, totalQuestions int, question string, options []string) string {
	text := fmt.Sprintf(`üéØ <b>–í–æ–ø—Ä–æ—Å %d –∏–∑ %d</b>

%s

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>`, questionNum, totalQuestions, question)

	for i, option := range options {
		text += fmt.Sprintf("\n%dÔ∏è‚É£ %s", i+1, option)
	}

	text += "\n\nüí° –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1‚Äì4)"
	text += "\n‚ùå –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π ¬´–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç¬ª"

	return text
}

// GetLevelTestKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è
func (m *Messages) GetLevelTestKeyboard() [][]string {
	return [][]string{
		{"üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"},
		{"üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"},
	}
}

// GetActiveTestKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
func (m *Messages) GetActiveTestKeyboard() [][]string {
	return [][]string{
		{"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç"},
		{"üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"},
	}
}

// GetTestAnswerKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
func (m *Messages) GetTestAnswerKeyboard(options []string) [][]tgbotapi.InlineKeyboardButton {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ (–≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
	buttonTexts := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"}

	for i := range options {
		buttonText := buttonTexts[i]
		if i >= len(buttonTexts) {
			buttonText = fmt.Sprintf("%d", i+1)
		}

		button := tgbotapi.NewInlineKeyboardButtonData(
			buttonText,
			fmt.Sprintf("test_answer_%d", i),
		)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
	cancelButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", "test_cancel")
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{cancelButton})

	return keyboard
}
