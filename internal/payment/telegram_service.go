package payment

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// TelegramPaymentService —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Payments API
type TelegramPaymentService struct {
	botToken      string
	providerToken string
	baseURL       string
	httpClient    *http.Client
}

// NewTelegramPaymentService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
func NewTelegramPaymentService(botToken, providerToken string) *TelegramPaymentService {
	return &TelegramPaymentService{
		botToken:      botToken,
		providerToken: providerToken,
		baseURL:       "https://api.telegram.org/bot" + botToken,
		httpClient:    &http.Client{Timeout: 30 * time.Second},
	}
}

// SendInvoice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
func (s *TelegramPaymentService) SendInvoice(chatID int64, invoice *Invoice) error {
	endpoint := s.baseURL + "/sendInvoice"

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ invoice –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üîß –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è chat_id: %d, payload: %s, provider_token: %s\n",
		chatID, invoice.Payload, s.providerToken)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	data := url.Values{}
	data.Set("chat_id", strconv.FormatInt(chatID, 10))
	data.Set("title", invoice.Title)
	data.Set("description", invoice.Description)
	data.Set("payload", invoice.Payload)
	data.Set("provider_token", s.providerToken)
	data.Set("currency", invoice.Currency)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã
	pricesJSON, err := json.Marshal(invoice.Prices)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Ü–µ–Ω: %w", err)
	}
	data.Set("prices", string(pricesJSON))

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if invoice.MaxTipAmount != nil {
		data.Set("max_tip_amount", strconv.Itoa(*invoice.MaxTipAmount))
	}
	if len(invoice.SuggestedTipAmounts) > 0 {
		tipsJSON, err := json.Marshal(invoice.SuggestedTipAmounts)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —á–∞–µ–≤—ã—Ö: %w", err)
		}
		data.Set("suggested_tip_amounts", string(tipsJSON))
	}
	if invoice.StartParameter != "" {
		data.Set("start_parameter", invoice.StartParameter)
	}
	if invoice.PhotoURL != "" {
		data.Set("photo_url", invoice.PhotoURL)
	}
	if invoice.PhotoSize != nil {
		data.Set("photo_size", strconv.Itoa(*invoice.PhotoSize))
	}
	if invoice.PhotoWidth != nil {
		data.Set("photo_width", strconv.Itoa(*invoice.PhotoWidth))
	}
	if invoice.PhotoHeight != nil {
		data.Set("photo_height", strconv.Itoa(*invoice.PhotoHeight))
	}

	// –ë—É–ª–µ–≤—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if invoice.NeedName {
		data.Set("need_name", "true")
	}
	if invoice.NeedPhoneNumber {
		data.Set("need_phone_number", "true")
	}
	if invoice.NeedEmail {
		data.Set("need_email", "true")
	}
	if invoice.NeedShippingAddress {
		data.Set("need_shipping_address", "true")
	}
	if invoice.SendPhoneNumberToProvider {
		data.Set("send_phone_number_to_provider", "true")
	}
	if invoice.SendEmailToProvider {
		data.Set("send_email_to_provider", "true")
	}
	if invoice.IsFlexible {
		data.Set("is_flexible", "true")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := s.httpClient.PostForm(endpoint, data)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
	if resp.StatusCode != http.StatusOK {
		// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(body))
	}

	return nil
}

// AnswerShippingQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ
func (s *TelegramPaymentService) AnswerShippingQuery(shippingQueryID string, ok bool, shippingOptions []ShippingOption, errorMessage string) error {
	endpoint := s.baseURL + "/answerShippingQuery"

	data := url.Values{}
	data.Set("shipping_query_id", shippingQueryID)
	data.Set("ok", strconv.FormatBool(ok))

	if ok && len(shippingOptions) > 0 {
		optionsJSON, err := json.Marshal(shippingOptions)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: %w", err)
		}
		data.Set("shipping_options", string(optionsJSON))
	} else if !ok && errorMessage != "" {
		data.Set("error_message", errorMessage)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := s.httpClient.PostForm(endpoint, data)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	return nil
}

// AnswerPreCheckoutQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
func (s *TelegramPaymentService) AnswerPreCheckoutQuery(preCheckoutQueryID string, ok bool, errorMessage string) error {
	endpoint := s.baseURL + "/answerPreCheckoutQuery"

	data := url.Values{}
	data.Set("pre_checkout_query_id", preCheckoutQueryID)
	data.Set("ok", strconv.FormatBool(ok))

	if !ok && errorMessage != "" {
		data.Set("error_message", errorMessage)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := s.httpClient.PostForm(endpoint, data)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	return nil
}

// CreatePremiumInvoice —Å–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
func (s *TelegramPaymentService) CreatePremiumInvoice(userID int64, plan string, durationDays int, amountKopecks int) *Invoice {
	payload := fmt.Sprintf("premium_%d_%s_%d", userID, plan, durationDays)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ invoice
	fmt.Printf("üí≥ –°–æ–∑–¥–∞–µ–º invoice: user_id=%d, plan=%s, duration=%d –¥–Ω–µ–π, amount=%d –∫–æ–ø–µ–µ–∫\n",
		userID, plan, durationDays, amountKopecks)

	invoice := &Invoice{
		Title:         "üåü –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ Lingua AI",
		Description:   fmt.Sprintf("–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %d –¥–Ω–µ–π", durationDays),
		Payload:       payload,
		ProviderToken: s.providerToken,
		Currency:      "RUB",
		Prices: []LabeledPrice{
			{
				Label:  fmt.Sprintf("–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ (%d –¥–Ω–µ–π)", durationDays),
				Amount: amountKopecks,
			},
		},
		StartParameter: "premium",
		PhotoURL:       "https://lingua-ai.ru/images/premium.jpg",
		NeedEmail:      true,
		IsFlexible:     false,
	}

	fmt.Printf("‚úÖ Invoice —Å–æ–∑–¥–∞–Ω: payload=%s, provider_token=%s\n", payload, s.providerToken)
	return invoice
}

// CreateShippingOptions —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
func (s *TelegramPaymentService) CreateShippingOptions() []ShippingOption {
	return []ShippingOption{
		{
			ID:    "digital",
			Title: "–¶–∏—Ñ—Ä–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
			Prices: []LabeledPrice{
				{
					Label:  "–¶–∏—Ñ—Ä–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
					Amount: 0, // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
				},
			},
		},
	}
}
