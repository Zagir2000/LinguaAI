package tts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"go.uber.org/zap"
)

// SynthesizeRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Piper TTS API
type SynthesizeRequest struct {
	Text     string `json:"text"`
	Language string `json:"language,omitempty"`
}

// PiperService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Text-to-Speech —á–µ—Ä–µ–∑ Piper TTS API
type PiperService struct {
	logger  *zap.Logger
	baseURL string
	client  *http.Client
}

// NewPiperService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Piper TTS —Å–µ—Ä–≤–∏—Å
func NewPiperService(logger *zap.Logger, baseURL string) *PiperService {
	return &PiperService{
		logger:  logger,
		baseURL: baseURL,
		client: &http.Client{
			Timeout: 30 * time.Second, // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
		},
	}
}

// SynthesizeText –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Piper TTS
func (s *PiperService) SynthesizeText(ctx context.Context, text string) ([]byte, error) {
	s.logger.Info("üéµ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Piper TTS",
		zap.String("text", text),
		zap.Int("text_length", len(text)))

	audioData, err := s.generateAudio(ctx, text)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: %w", err)
	}

	s.logger.Info("üéµ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
		zap.String("text", text),
		zap.Int("audio_size", len(audioData)))

	return audioData, nil
}

// generateAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Piper TTS API –∏ –ø–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ
func (s *PiperService) generateAudio(ctx context.Context, text string) ([]byte, error) {
	url := fmt.Sprintf("%s/synthesize-raw", s.baseURL)

	// –°–æ–∑–¥–∞–µ–º JSON –∑–∞–ø—Ä–æ—Å
	request := SynthesizeRequest{
		Text:     text,
		Language: "", // –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	}

	jsonData, err := json.Marshal(request)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")

	s.logger.Info("üéµ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Piper TTS",
		zap.String("url", url),
		zap.String("text", text))

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		respBody, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç Piper TTS: %d, —Ç–µ–ª–æ: %s", resp.StatusCode, respBody)
	}

	// –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
	audioData, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	return audioData, nil
}
