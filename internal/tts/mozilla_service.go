package tts

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"time"

	"go.uber.org/zap"
)

// MozillaService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Text-to-Speech —á–µ—Ä–µ–∑ Mozilla TTS
type MozillaService struct {
	logger *zap.Logger
}

// NewMozillaService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Mozilla TTS —Å–µ—Ä–≤–∏—Å
func NewMozillaService(logger *zap.Logger) *MozillaService {
	return &MozillaService{
		logger: logger,
	}
}

// SynthesizeText –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Mozilla TTS
func (s *MozillaService) SynthesizeText(ctx context.Context, text string) ([]byte, error) {
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	if len(text) > 500 {
		text = text[:500] + "..."
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
	words := strings.Fields(text)
	if len(words) > 50 {
		text = strings.Join(words[:50], " ") + "..."
	}

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	cleanText := s.cleanText(text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Mozilla TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	if err := s.checkMozillaTTS(); err != nil {
		return nil, fmt.Errorf("mozilla tts –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %w", err)
	}

	s.logger.Info("üéµ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Mozilla TTS",
		zap.String("text", cleanText),
		zap.Int("text_length", len(cleanText)))

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Mozilla TTS
	audioData, err := s.generateAudio(ctx, cleanText)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: %w", err)
	}

	s.logger.Info("üéµ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
		zap.String("text", cleanText),
		zap.Int("audio_size", len(audioData)))

	return audioData, nil
}

// checkMozillaTTS –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ Mozilla TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
func (s *MozillaService) checkMozillaTTS() error {
	cmd := exec.Command("tts", "--version")
	output, err := cmd.Output()
	if err != nil {
		return fmt.Errorf("mozilla tts –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", err)
	}

	s.logger.Debug("Mozilla TTS –≤–µ—Ä—Å–∏—è", zap.String("version", string(output)))
	return nil
}

// generateAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Mozilla TTS
func (s *MozillaService) generateAudio(ctx context.Context, text string) ([]byte, error) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
	tempAudioFile := fmt.Sprintf("/tmp/mozilla_audio_%d.wav", time.Now().UnixNano())
	defer s.cleanupFile(tempAudioFile)

	// –ö–æ–º–∞–Ω–¥–∞ Mozilla TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
	cmd := exec.CommandContext(ctx, "tts",
		"--text", text,
		"--model_name", "tts_models/en/ljspeech/tacotron2-DDC",
		"--out_path", tempAudioFile)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	if err := cmd.Run(); err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è mozilla tts", zap.Error(err))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è mozilla tts: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
	if _, err := os.Stat(tempAudioFile); os.IsNotExist(err) {
		s.logger.Error("–∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω", zap.String("filename", tempAudioFile))
		return nil, fmt.Errorf("–∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: %s", tempAudioFile)
	}

	// –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
	audioData, err := s.readAudioFile(tempAudioFile)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ: %w", err)
	}

	return audioData, nil
}

// readAudioFile —á–∏—Ç–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª
func (s *MozillaService) readAudioFile(filename string) ([]byte, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		return nil, fmt.Errorf("–∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filename)
	}

	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	return os.ReadFile(filename)
}

// cleanupFile —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
func (s *MozillaService) cleanupFile(filename string) {
	if err := os.Remove(filename); err != nil {
		s.logger.Warn("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
			zap.String("filename", filename),
			zap.Error(err))
	}
}

// cleanText –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
func (s *MozillaService) cleanText(text string) string {
	// –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
	text = strings.ReplaceAll(text, "<b>", "")
	text = strings.ReplaceAll(text, "</b>", "")
	text = strings.ReplaceAll(text, "<i>", "")
	text = strings.ReplaceAll(text, "</i>", "")
	text = strings.ReplaceAll(text, "<tg-spoiler>", "")
	text = strings.ReplaceAll(text, "</tg-spoiler>", "")

	// –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
	text = strings.ReplaceAll(text, "üéµ", "")
	text = strings.ReplaceAll(text, "üá∑üá∫", "")
	text = strings.ReplaceAll(text, "üá∫üá∏", "")

	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	text = strings.TrimSpace(text)
	text = strings.ReplaceAll(text, "  ", " ")

	return text
}
