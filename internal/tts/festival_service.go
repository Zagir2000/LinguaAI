package tts

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"time"

	"go.uber.org/zap"
)

// FestivalService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Text-to-Speech —á–µ—Ä–µ–∑ Festival
type FestivalService struct {
	logger *zap.Logger
}

// NewFestivalService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Festival TTS —Å–µ—Ä–≤–∏—Å
func NewFestivalService(logger *zap.Logger) *FestivalService {
	return &FestivalService{
		logger: logger,
	}
}

// SynthesizeText –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Festival
func (s *FestivalService) SynthesizeText(ctx context.Context, text string) ([]byte, error) {
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
	if len(text) > 1000 {
		text = text[:1000] + "..."
	}

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	cleanText := s.cleanText(text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Festival —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	if err := s.checkFestival(); err != nil {
		return nil, fmt.Errorf("festival –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %w", err)
	}

	s.logger.Info("üéµ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Festival",
		zap.String("text", cleanText),
		zap.Int("text_length", len(cleanText)))

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Festival
	audioData, err := s.generateAudio(ctx, cleanText)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: %w", err)
	}

	s.logger.Info("üéµ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
		zap.String("text", cleanText),
		zap.Int("audio_size", len(audioData)))

	return audioData, nil
}

// checkFestival –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ Festival —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
func (s *FestivalService) checkFestival() error {
	cmd := exec.Command("festival", "--version")
	output, err := cmd.Output()
	if err != nil {
		return fmt.Errorf("festival –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", err)
	}

	s.logger.Debug("Festival –≤–µ—Ä—Å–∏—è", zap.String("version", string(output)))
	return nil
}

// getBestVoice –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
func (s *FestivalService) getBestVoice() string {
	// –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É)
	voices := []string{
		"voice_cmu_us_slt_arctic_hts", // –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
		"voice_cmu_us_rms_arctic_hts", // –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å
		"voice_cmu_us_awb_arctic_hts", // –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —à–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π –≥–æ–ª–æ—Å
		"voice_kallpc16k",             // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤
	for _, voice := range voices {
		cmd := exec.Command("festival", "-eval", fmt.Sprintf("(voice_%s)", voice), "-eval", "(exit)")
		if err := cmd.Run(); err == nil {
			s.logger.Info("üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å", zap.String("voice", voice))
			return voice
		}
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
	s.logger.Warn("üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å")
	return "voice_kallpc16k"
}

// generateAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Festival
func (s *FestivalService) generateAudio(ctx context.Context, text string) ([]byte, error) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—Å—Ç–∞
	tempTextFile := fmt.Sprintf("/tmp/festival_text_%d.txt", time.Now().UnixNano())

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
	if err := s.writeTextFile(tempTextFile, text); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—Å—Ç–∞: %w", err)
	}
	defer s.cleanupFile(tempTextFile)

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
	tempAudioFile := fmt.Sprintf("/tmp/festival_audio_%d.wav", time.Now().UnixNano())
	defer s.cleanupFile(tempAudioFile)

	// –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
	bestVoice := s.getBestVoice()

	// –ö–æ–º–∞–Ω–¥–∞ text2wave –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
	cmd := exec.CommandContext(ctx, "text2wave",
		"-eval", fmt.Sprintf("(%s)", bestVoice), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
		"-eval", "(Parameter.set 'Duration_Stretch 0.9)", // –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
		"-eval", "(Parameter.set 'Int_Target_Mean 0.0)", // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è
		"-eval", "(Parameter.set 'Int_Target_Std 1.2)", // –ë–æ–ª—å—à–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
		"-eval", "(Parameter.set 'F0_Mean 180)", // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
		"-eval", "(Parameter.set 'F0_Std 30)", // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç—ã
		tempTextFile, "-o", tempAudioFile)

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥
	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	if err := cmd.Run(); err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è text2wave",
			zap.Error(err),
			zap.String("stderr", stderr.String()))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è text2wave: %w", err)
	}

	// –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
	audioData, err := s.readAudioFile(tempAudioFile)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ: %w", err)
	}

	return audioData, nil
}

// writeTextFile –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
func (s *FestivalService) writeTextFile(filename, text string) error {
	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
	_, err = file.WriteString(text)
	return err
}

// readAudioFile —á–∏—Ç–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª
func (s *FestivalService) readAudioFile(filename string) ([]byte, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		return nil, fmt.Errorf("–∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filename)
	}

	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	return os.ReadFile(filename)
}

// cleanupFile —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
func (s *FestivalService) cleanupFile(filename string) {
	if err := os.Remove(filename); err != nil {
		s.logger.Warn("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
			zap.String("filename", filename),
			zap.Error(err))
	}
}

// cleanText –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
func (s *FestivalService) cleanText(text string) string {
	// –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
	text = strings.ReplaceAll(text, "<b>", "")
	text = strings.ReplaceAll(text, "</b>", "")
	text = strings.ReplaceAll(text, "<i>", "")
	text = strings.ReplaceAll(text, "</i>", "")
	text = strings.ReplaceAll(text, "<tg-spoiler>", "")
	text = strings.ReplaceAll(text, "</tg-spoiler>", "")

	// –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
	text = strings.ReplaceAll(text, "üéµ", "")
	text = strings.ReplaceAll(text, "üá∑üá∫", "")
	text = strings.ReplaceAll(text, "üá∫üá∏", "")

	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	text = strings.TrimSpace(text)
	text = strings.ReplaceAll(text, "  ", " ")

	return text
}
